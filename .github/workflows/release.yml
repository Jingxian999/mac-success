name: Build/release
on:
  push
jobs:
  create_release:
    runs-on: macos-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Get Build Number
        id: build_number
        uses: einaregilsson/build-number@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.build_number.outputs.build_number }}
          release_name: Release-${{ steps.build_number.outputs.build_number }}
          draft: false
          prerelease: false


  release:
    needs: create_release
   
    # runs-on: ${{matrix.os}}
    runs-on: self-hosted
    permissions:
      contents: write
    strategy:
      matrix:
        os: [macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '21.7.1'
     

      - name: Linux Release
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Running Linux specific steps"
          npm i
          npx update-browserslist-db@latest
          npm run dist-linux
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Mac Release
        if: matrix.os == 'macos-latest'
        run: |
            echo "Running mac specific steps"
            npm i
            npx update-browserslist-db@latest
            npm run dist-mac
        shell: bash
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      
          
      - name: Find .deb Asset
        if: matrix.os == 'ubuntu-latest'
        id: find_deb_asset
        run: |
          DEB_FILE=$(find ./dist -name "*.deb" -type f -print -quit)
          echo "::set-output name=deb_file::$DEB_FILE"
      - name: Find .snap Asset
        if: matrix.os == 'ubuntu-latest'
        id: find_snap_asset
        run: |
          SNAP_FILE=$(find ./dist -name "*.snap" -type f -print -quit)
          echo "::set-output name=snap_file::$SNAP_FILE"
      - name: Find .AppImage Asset
        if: matrix.os == 'ubuntu-latest'
        id: find_appimage_asset
        run: |
          APPIMAGE_FILE=$(find ./dist -name "*.AppImage" -type f -print -quit)
          echo "::set-output name=appimage_file::$APPIMAGE_FILE"

      - name: Find .dmg Asset
        if: matrix.os == 'macos-latest'
        id: find_dmg_asset
        run: |
            DMG_FILE=$(find ./dist -name "*.dmg" -type f -print -quit)
            echo "::set-output name=dmg_file::$DMG_FILE"
 
      - name: mac notarize
        if: matrix.os == 'macos-latest'
        env:
            APPLE_ID: harvilabusc@gmail.com
            ISSUER_UUID: 8ec4fd53-115a-4083-9abd-8c3fe9f95ed3
            API_KEY_ID: 3YK6J5LXFG
            API_KEY_PATH: ./private_keys/AuthKey_3YK6J5LXFG.p8
        run: |
            xcrun notarytool submit "${{steps.find_dmg_asset.outputs.dmg_file}}" \
                --issuer "${{ env.ISSUER_UUID }}" \
                --key-id "${{ env.API_KEY_ID }}" \
                --key "${{ env.API_KEY_PATH }}"




      - name: Upload .deb Asset
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_deb_asset.outputs.deb_file }}
          asset_name: ${{ steps.find_deb_asset.outputs.deb_file }}
          asset_content_type: application/vnd.debian.binary-package
      - name: Upload .snap Asset
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_snap_asset.outputs.snap_file }}
          asset_name: ${{ steps.find_snap_asset.outputs.snap_file }}
          asset_content_type: application/octet-stream
      - name: Upload .AppImage Asset
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_appimage_asset.outputs.appimage_file }}
          asset_name: ${{ steps.find_appimage_asset.outputs.appimage_file }}
          asset_content_type: application/octet-stream

      - name: Upload .dmg Asset
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ needs.create_release.outputs.upload_url }}
            asset_path: ${{ steps.find_dmg_asset.outputs.dmg_file }}
            asset_name: ${{ steps.find_dmg_asset.outputs.dmg_file }}
            asset_content_type: application/octet-stream
      

     